str(finalffpi)
plot(finalffpi[, 1])
str(all.df)
plot(all.df[, 3])
head(udsFx)
head(usdFx)
head(finalffpi)
head(usdFx[Year >= 1990, ])
head(usdFx[usdFx$Year >= 1990, ])
head(all.df)
summary(all.df)
head(sorted.df)
plot(sorted.df[, 3])
plot(finalffpi[,1])
sorted.df[, 3]
unique(sorted.df[, 3])
head(finalffpi)
head(all.df)
head(sorted.df)
plot(finalffpi[,1])
with(finalffpi, plot(Food.Price.Index ~ Year))
with(sorted.df, plot(Food.Price.Index ~ Year))
plot(sorted.df$Food.Price.Index)
usdFx
head(usdFx)
head(usdFx)
head(ffpi)
head(ffpi)
head(sorted.df)
head(sorted.df)
head(sorted.df)
c
cc
install.packages("forecast", repos = "http://cran.stat.auckland.ac.nz")
install.packages("timedate")
install.packages("timedate")
install.packages("timeDate")
install.packages("forecast", repos = "http://cran.stat.auckland.ac.nz")
library(forecast)
library(help = forecast)
baseModel
str(baseModel)
predict(baseModel)
dim(sorted.df)
tail(train.df)
n
n - 5
dim(train.df)
pred.df
head(sorted.df)
args(auto.arima)
pred.df
dim(pred.df)
dim(pred.df)
NROW(pred.df) + NROW(train.df)
NROW(sorted.df)
baseModel
fxModel
sorted.df = bu.df
FAOsearch()
3
1
1
1
All
.LastSearch
str(.LastSearch()
str(.LastSearch)
str(test)
head(test)
str(test)
str(test$aggregates)
unique(test$aggregates$FAOST_CODE)
str(wfbs)
str(wfbs)
.LastSearch
FAOsearch()
3
1
1
1
All
.LastSearch
head(sorted.df)
FAOsearch()
1
1
1
2
4
.LastSearch
head(test)
str(test)
str(wfbs)
str(sorted.df)
str(cerealsAnalysis.df)
str(train.df)
str(pred.df)
str(wfbs)
str(cerealsAnalysis.df)
str(cerealAnalysis.df)
str(cerealsAnalysis.df)
str(cerealsAnalysis.df)
head(train.df)
unique(train.df$total_cereal_prod)
cor(cerealsAnalysis.df)
lowess
args(lowess)
args(loess)
loewss
lowess
?lowess
loess
?loess
splines
library(splines)
splines
spline
args(spline)
loess
args(loess)
args(loess)
summary(cerealsAnalysis.df)
test = with(cerealsAnalysis.df, spline(Year, total_cereal_prod))
str(Test)
str(test)
test = with(cerealsAnalysis.df, spline(Year, total_cereal_prod, xout = 300))
str(test)
test = with(cerealsAnalysis.df, spline(Year, total_cereal_prod, n = 300))
str(test)
NROW(cerealsAnalysis.df)
300/12
args(spline)
str(cerealsAnalysis.df)
str(cerealsAnalysis.df)
pairs(cerealsAnalysis.fd)
pairs(cerealsAnalysis.df)
head(cerealsAnalysis.df)
library(faostat)
library(help = FAOSTAT)
.LastSearch
str(.LastSearch)
FAOsearch()
7
1
1
1
0
0
All
getWDI
cerealQuery
cerealQuery
traceback()
getFAOtoSYB
str(pop)
grep("World", pop$Country)
grep("World", pop$Country, value = TRUE)
str(wpop)
head(wpop)
head(wfbs)
head(cerealsAnalysis.df)
head(cerealsFinal.df
)
head(cerealsFinal.df)
str(sorted.df)
pairs(cerealsFinal.df)
str(cerealsFinal.df)
summary(cerealsFinal.df)
summary(wfbs)
FAOsearch()
1
1
0
167
4
.LastSearch
FAOsearch()
1
1
0
134
4
.LastSearch
FAOsearch()
1
1
0
88
4
.LastSearch
str(wfbs)
str(sorted.df)
str(train.df)
warnings()
str(pred.df[,
                                    c("usdFx", "SP.POP.TOTL",
                                      grep("prod", colnames(pred.df), value = TRUE))])
15 * 12
dim(cerealsFinal.df)
cerealsFinal.df = bu.df
library("rWBclimate")
library(devtools)
install_github(repo = "https://github.com/ropensci/rWBclimate")
install_github(repo = "https://github.com/ropensci/rWBclimate", username = "ropensci")
install_github(repo = "rWBclimate", username = "ropensci")
install_github(repo = "rWBclimate", username = "ropensci")
library(devtools)
install_github(repo = "rWBclimate", username = "ropensci")
install_github(repo = "rWBclimate", username = "ropensci")
library(help = rWBclimate)
?get_historical_precip
check_ISO_code
check_ISO_code
rWBclimate::check_ISO_code
rWBclimate:::check_ISO_code
?get_historical_precip
str(test)
?get_historical_precip
library(help = rWBclimate)
?get_historical_data_recursive
?get_historical_data
?get_historical_data
?get_historical_precip
str(test)
install.packages("raincpc", repos = "http://cran.stat.auckland.ac.nz")
library(help = raincpc)
Y
?cpc_read_rawdata
str(test)
str(test2)
image(test2)
image(test2)
image(test2)
image(test2)
dim(test2)
length(test2)
apply(test2, 2, sum)
length(test2) * 12
summary(test2)
summary(c(test2))
dim(test2)
length(test2)
length(test2) * 365
image(log(test2))
image(log(test2 + 1))
head(test.df)
length(rep(1:720, 360))
test.ts = y %*% x
length(test.ts)
plot(test.ts, type = "l")
head(test.ts)
head(x)
test.ts
y
x
plot(test.ts)
test.ts
plot(test.ts)
plot(test.ts, type = "l")
install.packages("neuralnet", repos= "http://cran.stat.auckland.ac.nz")
str(x.df)
str(x.df)
dim(x.df)
?neuralnet
library(neuralnet)
?neuralnet
colnames(x.df)
nn.formula
test.nn
predict(test.nn)
predict(testnn)
plot(test.nn)
fitted(test.nn)
str(test.nn)
length(test.ts)
length(y)
dim(x)
alpha
x
y
str(test.nn)
y
pred.nn
compute
?compute
str(pred.nn)
?neuralnet
alpha
?neuralnet
install.packages("caret", repos = "http://cran.stat.auckland.ac.nz")
dim(train.df)
nn.formula
str(nn.formula)
warnings()
str(train.df)
head(mygrid)
head(my.grid)
warnings()
library(help = caret)
?train
library(caret)
?train
trainControl
args(trainControl)
trainControl()
args(trainControl)
trainControl()
control.nn
warnings()
str(test.fit)
predict(test.fit)
predict(test.fit, pred.df[, -1])
mse
test.fit
predict.nn
class(test.fit)
predict.train
predictionFunction
predict(test.nn)
str(compute(test.nn, pred.df[, -1]))
test.fit
